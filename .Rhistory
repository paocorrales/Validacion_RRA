#Le saco variables
knitr::kable(obs_pb[, .N, by = .(sub.id)])
obs1 <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(measure.vars = list(u, v), value.name = "obs")
obs1 <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(.,measure.vars = list(u, v), value.name = "obs")
obs_pb[, list(lon, lat, elev, u, v, time.obs)]
obs1 <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), value.name = "obs")
View(obs_pb)
View(obs1)
obs1 <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id = "2819"] %>%
.[obs.id == "v", obs.id = "2820"]
obs1 <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id := "2819"] %>%
.[obs.id == "v", obs.id := "2820"]
View(obs1)
obs_pb <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id := "2819"] %>%
.[obs.id == "v", obs.id := "2820"]
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id == 4] %>%  #Asumo que sub.id = 4  es para los datos del goes porque son muchísimos y al graficar podrían tener pinta
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time.obs, obs.id, obs)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
setnames(old = c("time"), new = c("time.obs"))
obs_pb <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id := "2819"] %>%
.[obs.id == "v", obs.id := "2820"] %>%
.[, source := "prepbufr"]
obs_pb <- fread('../obs_PREPBUFR/20182011_18_prepbufr.csv',
na.strings = "100000000000.000")
colnames(obs_pb) <- c("obs.id", "time", "station", "lon", "lat", "dhr", "sub.id", "station.elev", "p", "q", "t", "elev", "u", "v", "pwo", "cat", "press")
obs_pb[, time := ymd_h(time)]
obs_pb[, time.obs := time + as.period(as.duration(days(x=1))*(dhr/24))]
obs_pb <- obs_pb[obs.id == "SATWND"] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
#Le saco variables
knitr::kable(obs_pb[, .N, by = .(sub.id)])
obs_pb <- obs_pb[, list(lon, lat, elev, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id := "2819"] %>%
.[obs.id == "v", obs.id := "2820"] %>%
.[, source := "prepbufr"]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
setnames(old = c("time"), new = c("time.obs")) %>%
.[, source := "rra"]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"] %>%
setnames(old = c("time"), new = c("time.obs")) %>%
obs <- rbind(obs_pb, obs_rra)
obs <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id == 4] %>%  #Asumo que sub.id = 4  es para los datos del goes porque son muchísimos y al graficar podrían tener pinta
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"] %>%
setnames(old = c("time"), new = c("time.obs")) %>%
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"]
obs <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id == 4] %>%  #Asumo que sub.id = 4  es para los datos del goes porque son muchísimos y al graficar podrían tener pinta
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"]
setnames(obs_rra, old = c("time"), new = c("time.obs")) %>%
setnames(obs_rra, old = c("time"), new = c("time.obs"))
obs <- rbind(obs_pb, obs_rra)
View(obs)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_wrap(~source)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_wrap(~source + sub.id)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_grid(~source + sub.id)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_grid(~source + obs.id)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_grid(~source + obs.id, ncol = 2)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_wrap(~source + obs.id, ncol = 2)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_grid(obs.id~source, ncol = 2)
ggplot(obs, aes(lon, lat)) +
geom_point(aes(color = obs)) +
facet_grid(obs.id~source)
duplicated(obs_rra, by = .(lon, lat))
duplicated(obs_rra, by = c(lon, lat))
duplicated(obs_rra, by = c("lon", "lat"))
obs_rra[duplicated(obs_rra, by = c("lon", "lat"))]
obs_rra[duplicated(obs_rra, by = c("lon", "lat", "obs"))]
install.packages("naturalearth")
install.packages("rnaturalearth")
library(rnaturalearth)
map <- rnaturalearth::ne_countries(continent = 'america', scale = 'small')
map <- rnaturalearth::ne_countries(continent = 'southamerica', scale = 'small')
map <- rnaturalearth::ne_countries(continent = 'south america', scale = 'small')
View(map)
map <- rnaturalearth::ne_countries(continent = 'south america', scale = 'small', returnclass = 'sf)
map <- rnaturalearth::ne_countries(continent = 'south america', scale = 'small', returnclass = 'sf')
map <- rnaturalearth::ne_countries(continent = 'south america', scale = 'small', returnclass = 'sf')
install.packages("rgeos")
map <- rnaturalearth::ne_countries(continent = 'south america', scale = 'small', returnclass = 'sf')
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map) +
geom_point(aes(color = obs)) +
facet_grid(obs.id~source)
View(map)
ggplot(obs, aes(ConvertLongitude(lon), lat))
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
geom_point(aes(color = obs)) +
facet_grid(obs.id~source)
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
geom_point(aes(color = obs)) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
facet_grid(obs.id~source)
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
geom_point(aes(color = obs)) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(obs.id~source) +
theme_bw()
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
geom_point(aes(color = obs)) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(obs.id~source) +
theme_minimal()
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(obs.id~source) +
theme_minimal()
range(obs$elev)
count(unique(obs$elev))
sum(unique(obs$elev))
g
ggplot(obs, aes(elev)) +
geom_density()
ggplot(obs, aes(elev)) +
geom_density() +
facet_wrap(~source)
View(obs_pb)
obs_pb <- fread('../obs_PREPBUFR/20182011_18_prepbufr.csv',
na.strings = "100000000000.000")
colnames(obs_pb) <- c("obs.id", "time", "station", "lon", "lat", "dhr", "sub.id", "station.elev", "p", "q", "t", "elev", "u", "v", "pwo", "cat", "press")
obs_pb[, time := ymd_h(time)]
obs_pb[, time.obs := time + as.period(as.duration(days(x=1))*(dhr/24))]
obs_pb <- obs_pb[obs.id == "SATWND"] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
View(obs_pb)
ggplot(obs, aes(elev)) +
+ geom_density() +
+ facet_wrap(~source)
ggplot(obs, aes(elev)) +
geom_density() +
facet_wrap(~source)
knitr::opts_chunk$set(echo = TRUE)
library(metR)
library(ggplot2)
library(data.table)
library(dplyr)
library(interp)
library(patchwork)
library(lubridate)
source('read_files.R')
obs_pb <- fread('../obs_PREPBUFR/20182011_18_prepbufr.csv',
na.strings = "100000000000.000")
colnames(obs_pb) <- c("obs.id", "time", "station", "lon", "lat", "dhr", "sub.id", "station.elev", "p", "q", "t", "elev", "u", "v", "pwo", "cat", "press")
obs_pb[, time := ymd_h(time)]
obs_pb[, time.obs := time + as.period(as.duration(days(x=1))*(dhr/24))]
obs_pb <- obs_pb[obs.id == "SATWND"] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
#Le saco variables
knitr::kable(obs_pb[, .N, by = .(sub.id)])
obs_pb <- obs_pb[, list(lon, lat, p, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id := "2819"] %>%
.[obs.id == "v", obs.id := "2820"] %>%
.[, source := "prepbufr"]
obs <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id == 4] %>%  #Asumo que sub.id = 4  es para los datos del goes porque son muchísimos y al graficar podrían tener pinta
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"]
setnames(obs_rra, old = c("time", "elev"), new = c("time.obs", "p"))
# Ojo! la elevación está en hectopascales!
obs <- rbind(obs_pb, obs_rra)
map <- rnaturalearth::ne_countries(continent = 'south america', scale = 'small', returnclass = 'sf')
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(obs.id~source) +
theme_minimal()
> ggplot(obs, aes(p)) +
geom_density() +
facet_wrap(~source)
range(obs$p)
ggplot(obs, aes(p)) +
geom_density() +
facet_wrap(~source)
obs[p %between% c(600, 1000), level := "bajo"] %>%
.[p %between% c(300, 600), level := "medio"] %>%
.[p %between% c(300, 100), level := "alto"]
obs[obs.id == 2819] %>%
ggplot(aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(level~source) +
theme_minimal()
obs[obs.id == 2819] %>%
ggplot(aes(lon, lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(level~source) +
theme_minimal()
obs[obs.id == 2819] %>%
ggplot(aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(level~source) +
theme_minimal()
obs[p %between% c(600, 1000), lev := "bajo"] %>%
.[p %between% c(300, 600), lev := "medio"] %>%
.[p %between% c(300, 100), lev := "alto"]
obs[obs.id == 2819] %>%
ggplot(aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(lev~source) +
theme_minimal()
obs[] %>%
ggplot(aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(lev~source + obs.id) +
theme_minimal()
obs[] %>%
ggplot(aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(lev~obs.id + source) +
theme_minimal()
devtools::install_github("teunbrand/ggnomics")
install.packages("GenomicRanges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
devtools::install_github("teunbrand/ggnomics")
obs[] %>%
ggplot(aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_nested(lev~obs.id + source) +
theme_minimal()
library(ggnomics)
obs[] %>%
ggplot(aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_nested(lev~obs.id + source) +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(metR)
library(ggplot2)
library(data.table)
library(dplyr)
library(interp)
library(patchwork)
library(ggnomics)
library(lubridate)
source('read_files.R')
knitr::kable(obs_pb[, .N, by = .(sub.id)])
# prepbufr
obs_pb <- fread('../obs_PREPBUFR/20182011_18_prepbufr.csv',
na.strings = "100000000000.000")
colnames(obs_pb) <- c("obs.id", "time", "station", "lon", "lat", "dhr", "sub.id", "station.elev", "p", "q", "t", "elev", "u", "v", "pwo", "cat", "press")
obs_pb[, time := ymd_h(time)]
obs_pb[, time.obs := time + as.period(as.duration(days(x=1))*(dhr/24))]
obs_pb <- obs_pb[obs.id == "AIRCFT"] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_pb <- obs_pb[, list(lon, lat, p, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id := "2819"] %>%
.[obs.id == "v", obs.id := "2820"] %>%
.[, source := "prepbufr"]
# RRA
obs <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id == 3] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"]
setnames(obs_rra, old = c("time", "elev"), new = c("time.obs", "p"))
source('read_files.R')
obs_pb <- fread('../obs_PREPBUFR/20182011_18_prepbufr.csv',
na.strings = "100000000000.000")
colnames(obs_pb) <- c("obs.id", "time", "station", "lon", "lat", "dhr", "sub.id", "station.elev", "p", "q", "t", "elev", "u", "v", "pwo", "cat", "press")
obs_pb[, time := ymd_h(time)]
obs_pb[, time.obs := time + as.period(as.duration(days(x=1))*(dhr/24))]
obs_pb <- obs_pb[obs.id == "AIRCFT"] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_pb <- obs_pb[, list(lon, lat, p, u, v, time.obs)] %>%
melt(., measure.vars = c("u", "v"), variable.name = "obs.id", value.name = "obs") %>%
.[obs.id == "u", obs.id := "2819"] %>%
.[obs.id == "v", obs.id := "2820"] %>%
.[, source := "prepbufr"]
obs <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id == 3] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"]
setnames(obs_rra, old = c("time", "elev"), new = c("time.obs", "p"))
# La unión
obs <- rbind(obs_pb, obs_rra)
map <- rnaturalearth::ne_countries(continent = 'south america', scale = 'small', returnclass = 'sf')
ggplot(obs, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent() +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(obs.id~source) +
theme_minimal()
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(obs.id) +
theme_minimal()
obs_rra <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs_rra[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id == 4] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, obs.id, obs)] %>%
.[, source := "rra"]
setnames(obs_rra, old = c("time", "elev"), new = c("time.obs", "p"))
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(obs.id) +
theme_minimal()
View(obs_rra)
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(~obs.id) +
theme_minimal()
obs_rra <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs_rra[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id %in% (3, 4)] %>%
obs_rra <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs_rra[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id %in% c(3, 4)] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, sub.id, obs.id, obs)] %>%
.[, source := "rra"]
setnames(obs_rra, old = c("time", "elev"), new = c("time.obs", "p"))
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(~obs.id + sub.id) +
theme_minimal()
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_grid(~obs.id + sub.id, ncol = 2) +
theme_minimal()
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_nested(~obs.id + sub.id, ncol = 2) +
theme_minimal()
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_nested(~obs.id + sub.id) +
theme_minimal()
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_nested(obs.id ~ sub.id) +
theme_minimal()
obs_rra <- read.obs('../obs_RRA/20181120_18/*0.dat', keep.obs = c(2819,2820)) %>%
rbind(read.obs('../obs_RRA/20181120_19/*0.dat', keep.obs = c(2819,2820)))
#Filtro solo lo que necesito (time range, dominio, tipo de u,v)
obs_rra <- obs_rra[time %between% c(as_datetime("2018-11-20 17:30:00"), as_datetime("2018-11-20 18:30:00"))] %>%
.[sub.id %in% c(4, 21)] %>%
.[lon %between% c(290, 310) & lat %between% c(-40, -20)]
obs_rra <- obs_rra[, list(lon, lat, elev, time, sub.id, obs.id, obs)] %>%
.[, source := "rra"]
setnames(obs_rra, old = c("time", "elev"), new = c("time.obs", "p"))
ggplot(obs_rra, aes(ConvertLongitude(lon), lat)) +
geom_sf(data = map, inherit.aes = FALSE) +
coord_sf(xlim = c(-70, -50), ylim = c(-40, -20)) +
geom_point(aes(color = obs)) +
scale_color_divergent(name = "V (m/s)") +
scale_x_continuous(name = "Longitud") +
scale_y_continuous(name = "Latitud") +
facet_nested(obs.id ~ sub.id) +
theme_minimal()
